#include"test_ulti.h"
#include"test_fun.h"
#include"ir.h"
#include"net.h"
#include"mat.h"
#include"layers/linear.h"


std::vector<float> linear_input={0.5020, 0.5654, 0.1067, 0.5434, 0.3533, 0.6418, 0.3589, 0.7402, 0.3442,0.0307};

std::vector<std::vector<float>> linear_weight = \
        {{-3.0719e-01,  1.0780e-01, -2.0559e-01, -1.8527e-01, -1.6090e-01,
          2.5734e-01, -1.6851e-01,  5.3505e-02, -3.0875e-01,  2.3678e-01},
        {-1.3050e-01, -9.9854e-02,  4.6431e-02,  1.1079e-01,  3.0469e-01,
         -1.7981e-01,  5.0703e-02, -2.2204e-01, -1.4597e-02, -5.3223e-02},
        { 2.3940e-01, -8.6630e-02,  8.3712e-02, -1.9211e-01, -3.0404e-01,
         -2.7101e-01,  2.7965e-01,  2.4131e-01, -1.1347e-01,  2.6031e-01},
        { 1.3729e-01,  3.0503e-01, -1.4290e-01,  1.5471e-02, -2.8678e-01,
         -2.7291e-01,  2.7201e-01, -2.5853e-01, -2.1701e-01, -2.1038e-01},
        { 2.8197e-01, -5.5205e-02,  6.8871e-02, -2.0350e-01,  1.5180e-01,
         -2.3172e-01, -1.1229e-01, -2.9781e-01, -1.4815e-01,  1.7417e-01},
        { 1.0573e-01, -1.2884e-01,  2.6318e-01, -3.7795e-02,  2.3826e-01,
         -8.4694e-02, -3.0863e-01, -2.5724e-01, -3.4230e-02,  3.5798e-02},
        {-7.1868e-02, -1.2859e-01,  2.2359e-01, -3.7307e-03,  1.5497e-01,
         -1.5896e-01, -2.6972e-01, -1.1099e-01, -2.2834e-01,  2.3606e-01},
        {-7.4711e-02, -8.5522e-03,  2.7338e-01,  2.9650e-01, -2.2422e-02,
          2.3819e-01, -2.6054e-01, -1.7454e-02,  6.3102e-02, -1.0971e-01},
        { 1.4854e-01, -1.0415e-01,  8.6241e-02, -2.1226e-01,  5.2077e-02,
         -4.4418e-02,  2.6772e-01, -2.7366e-01, -7.5754e-02, -1.7409e-01},
        { 2.2415e-01, -2.7412e-01, -5.5169e-02,  1.9532e-01,  2.6117e-01,
         -1.8216e-01, -2.5901e-01, -1.4548e-01,  2.0655e-01, -7.9075e-02},
        {-1.7816e-01,  1.8178e-01, -3.8390e-02,  1.1722e-01,  2.1277e-01,
         -1.2648e-01, -2.6228e-02, -2.1255e-01, -1.1402e-01,  6.4387e-05},
        { 8.0941e-02,  2.7671e-01,  9.2103e-02, -1.2885e-01, -5.9995e-02,
          1.0637e-01, -1.4164e-01, -6.1762e-02, -2.9040e-02, -2.1799e-01},
        {-2.0439e-01,  1.2154e-01,  7.9595e-02, -2.0933e-01, -1.7893e-01,
         -1.1194e-01,  4.1412e-02, -1.0967e-01, -2.0688e-01,  2.7727e-01},
        { 1.9006e-01, -2.9862e-01,  2.5964e-01,  9.5588e-02, -2.8095e-01,
          3.0640e-01,  9.5718e-02,  1.2926e-01,  9.3062e-02, -1.5968e-02},
        {-3.8268e-03, -2.6479e-01,  5.1408e-02,  2.8399e-01,  2.8516e-02,
         -1.0297e-01,  1.9454e-02, -1.5160e-01,  1.9272e-01,  1.9140e-01},
        {-4.5786e-02, -2.7905e-01, -2.5719e-02,  1.0467e-01, -1.3473e-01,
         -1.5019e-01, -2.7177e-02,  1.8830e-01,  1.5050e-03, -1.3721e-01},
        {-2.2488e-01,  2.2837e-01,  6.6036e-02,  1.6110e-01,  1.5994e-01,
          2.8693e-01, -8.8835e-02,  1.4462e-01, -2.2702e-01, -2.9243e-01},
        { 7.1483e-02,  7.3101e-02,  3.7889e-02,  2.8790e-01, -2.5990e-01,
         -1.7945e-02, -2.5433e-01, -2.3418e-01,  1.6764e-01, -4.4201e-02},
        {-5.4821e-02,  1.5910e-01,  2.3857e-01, -2.7316e-01,  2.2437e-01,
         -3.0088e-01,  3.8168e-02,  2.1991e-01, -1.8714e-01, -3.1526e-01},
        { 3.0830e-01, -1.6000e-01,  1.9569e-01, -8.6420e-02,  1.6595e-01,
         -2.7068e-01, -2.4449e-01, -2.5306e-02,  1.0159e-01,  2.0520e-01}};

std::vector<float> linear_bias =  {-0.1967,  0.2506,  0.0333,  0.1290,  0.2957,  0.1656, -0.1253, -0.0414,
         0.2490, -0.2261, -0.0056,  0.2170, -0.0226, -0.0657,  0.1193,  0.2260,
        -0.2299,  0.0264, -0.0509,  0.2654};

std::vector<float> linear_out = {-0.4242,  0.0332, -0.0244, -0.0878, -0.0987, -0.1287, -0.5098,  0.1634,
         0.0105, -0.3250, -0.1446,  0.2877, -0.4257,  0.1996,  0.0384,  0.0813,
         0.1096, -0.0475, -0.1229,  0.1233};


TEST(LINEAR,loadBin)
{
    easynn::Net net;
    EXPECT_EQ(net.loadModel("/home/hupeng/code/github/EasyNN/example/linear.pnnx.param",\
    "/home/hupeng/code/github/EasyNN/example/linear.pnnx.bin"),0);
}


TEST(LINEAR,forward)
{
    easynn::Net net;
    EXPECT_EQ(net.loadModel("/home/hupeng/code/github/EasyNN/example/linear.pnnx.param",\
    "/home/hupeng/code/github/EasyNN/example/linear.pnnx.bin"),0);

    easynn::Mat input(10);
    input.fillFromArray(linear_input);

    easynn::Mat output(20);
    output.fillFromArray(linear_out);

    net.input(0,input);
    easynn::Mat m;
    net.extractBlob(1,m);

    printMat(m);
    printMat(output);
    EXPECT_EQ(compareMat(m,output),0);

}