#include"test_ulti.h"
#include"test_fun.h"
#include"ir.h"
#include"net.h"
#include"mat.h"
#include"layers/expression.h"

std::vector<std::vector<std::vector<float>>> exp_add_left=\
        {{{0.2295, 0.2599, 0.6441, 0.0168, 0.7927, 0.3168, 0.9468, 0.2946,
           0.6510, 0.1767, 0.7645, 0.4612},
          {0.3943, 0.9388, 0.9126, 0.3142, 0.2770, 0.9274, 0.2598, 0.9339,
           0.4860, 0.6099, 0.4828, 0.5948},
          {0.9998, 0.1657, 0.4309, 0.5119, 0.3204, 0.4685, 0.3708, 0.3458,
           0.6965, 0.7607, 0.4896, 0.3414},
          {0.8516, 0.7120, 0.7675, 0.5260, 0.1127, 0.4690, 0.0656, 0.1274,
           0.7237, 0.8612, 0.9578, 0.0717},
          {0.7778, 0.9389, 0.4477, 0.9347, 0.4932, 0.6393, 0.2195, 0.4559,
           0.1840, 0.9226, 0.1510, 0.1915},
          {0.3332, 0.2625, 0.9882, 0.6747, 0.0630, 0.0969, 0.1638, 0.2066,
           0.7487, 0.2935, 0.1886, 0.2975},
          {0.6795, 0.6518, 0.5196, 0.0989, 0.2921, 0.9160, 0.9370, 0.3772,
           0.0927, 0.2677, 0.7827, 0.2746},
          {0.0812, 0.1388, 0.5617, 0.6608, 0.4961, 0.8730, 0.1547, 0.4763,
           0.0420, 0.8068, 0.1394, 0.3010},
          {0.0321, 0.3149, 0.5720, 0.6835, 0.1845, 0.0031, 0.2095, 0.2987,
           0.9365, 0.2844, 0.7457, 0.8291},
          {0.3599, 0.6601, 0.8168, 0.4337, 0.8746, 0.5469, 0.3573, 0.4779,
           0.2486, 0.8504, 0.6616, 0.9320},
          {0.3530, 0.5634, 0.5081, 0.7176, 0.1062, 0.3808, 0.9981, 0.4353,
           0.3269, 0.6623, 0.3985, 0.7898},
          {0.9516, 0.0289, 0.1992, 0.1402, 0.2444, 0.1211, 0.1212, 0.0188,
           0.2831, 0.6390, 0.9189, 0.1517}},

         {{0.9418, 0.8566, 0.1098, 0.0454, 0.1247, 0.9565, 0.8543, 0.4707,
           0.3405, 0.7362, 0.9467, 0.7226},
          {0.6276, 0.2356, 0.0118, 0.8911, 0.4193, 0.6709, 0.9051, 0.1855,
           0.8339, 0.3113, 0.4981, 0.9342},
          {0.1486, 0.3907, 0.0704, 0.2226, 0.5163, 0.9326, 0.1216, 0.9232,
           0.8832, 0.3250, 0.1453, 0.5212},
          {0.7148, 0.5316, 0.3406, 0.0170, 0.3191, 0.2849, 0.2415, 0.5319,
           0.7618, 0.9995, 0.9593, 0.6969},
          {0.9408, 0.8048, 0.1872, 0.3158, 0.9612, 0.6753, 0.9354, 0.5379,
           0.3592, 0.4402, 0.2048, 0.0823},
          {0.7723, 0.6818, 0.7118, 0.6614, 0.7270, 0.5569, 0.6218, 0.3408,
           0.2093, 0.7379, 0.3721, 0.4468},
          {0.3118, 0.0977, 0.1137, 0.1801, 0.2204, 0.1414, 0.8682, 0.1054,
           0.8015, 0.2708, 0.6153, 0.6022},
          {0.8705, 0.5935, 0.9919, 0.0586, 0.9524, 0.9755, 0.1864, 0.5465,
           0.4812, 0.6421, 0.6969, 0.8026},
          {0.3568, 0.3298, 0.4970, 0.9867, 0.5367, 0.6762, 0.4278, 0.9811,
           0.1398, 0.8697, 0.5646, 0.3473},
          {0.8531, 0.9425, 0.6495, 0.4983, 0.8105, 0.4635, 0.8852, 0.0164,
           0.3397, 0.8758, 0.4604, 0.7227},
          {0.2770, 0.5340, 0.9153, 0.2417, 0.9824, 0.0425, 0.8894, 0.1229,
           0.9444, 0.2923, 0.2484, 0.8285},
          {0.1150, 0.5183, 0.5363, 0.5093, 0.0094, 0.2796, 0.5879, 0.4254,
           0.5275, 0.5013, 0.3831, 0.2962}},

         {{0.3096, 0.2493, 0.8229, 0.2754, 0.5033, 0.3588, 0.4517, 0.9865,
           0.6831, 0.1928, 0.3726, 0.9510},
          {0.5593, 0.9482, 0.7583, 0.5221, 0.0553, 0.6887, 0.1079, 0.8163,
           0.2664, 0.8677, 0.3635, 0.9620},
          {0.4066, 0.2021, 0.4684, 0.3672, 0.2404, 0.9130, 0.2811, 0.7541,
           0.5825, 0.5392, 0.1108, 0.4390},
          {0.2816, 0.7801, 0.3829, 0.0783, 0.3744, 0.2429, 0.8034, 0.6760,
           0.5320, 0.4850, 0.4305, 0.3114},
          {0.0435, 0.5865, 0.8042, 0.4533, 0.1508, 0.4364, 0.3380, 0.1109,
           0.7376, 0.0349, 0.4138, 0.2180},
          {0.2032, 0.2016, 0.6599, 0.8047, 0.4858, 0.3934, 0.9137, 0.2693,
           0.6279, 0.4159, 0.8641, 0.1526},
          {0.5429, 0.8051, 0.5889, 0.2773, 0.9594, 0.0128, 0.0453, 0.8524,
           0.8258, 0.7511, 0.1315, 0.4201},
          {0.2756, 0.8755, 0.7852, 0.8273, 0.8024, 0.9469, 0.0486, 0.9950,
           0.9743, 0.9827, 0.4943, 0.0917},
          {0.9856, 0.0872, 0.9139, 0.1970, 0.2668, 0.8008, 0.8758, 0.1363,
           0.2088, 0.5141, 0.5744, 0.0157},
          {0.1499, 0.4181, 0.6614, 0.1974, 0.6969, 0.3377, 0.8968, 0.6852,
           0.2181, 0.8499, 0.8425, 0.5653},
          {0.6385, 0.9671, 0.6611, 0.5936, 0.0432, 0.7459, 0.0015, 0.7680,
           0.4933, 0.8672, 0.3020, 0.1445},
          {0.0239, 0.0835, 0.6143, 0.0222, 0.7029, 0.3813, 0.3447, 0.4178,
           0.1323, 0.3780, 0.7844, 0.0424}}};

std::vector<std::vector<std::vector<float>>> exp_add_right=\
        {{{0.8504, 0.3527, 0.2732, 0.1852, 0.0831, 0.1327, 0.7408, 0.7811,
          0.5388, 0.3581, 0.1281, 0.3524},
         {0.1136, 0.2335, 0.0560, 0.5823, 0.2443, 0.3582, 0.6021, 0.2641,
          0.3482, 0.8503, 0.3903, 0.1186},
         {0.3858, 0.7947, 0.1978, 0.7288, 0.2125, 0.5236, 0.0865, 0.8980,
          0.6229, 0.4823, 0.3888, 0.6427},
         {0.2928, 0.9212, 0.6126, 0.5984, 0.5310, 0.7659, 0.2059, 0.1726,
          0.9394, 0.0190, 0.4672, 0.3009},
         {0.7691, 0.8518, 0.8961, 0.7266, 0.3304, 0.8453, 0.9392, 0.4889,
          0.0316, 0.5781, 0.6768, 0.0447},
         {0.7910, 0.7272, 0.1419, 0.7331, 0.7008, 0.5970, 0.0068, 0.2140,
          0.0807, 0.0034, 0.7909, 0.2787},
         {0.3202, 0.0417, 0.4204, 0.8653, 0.0087, 0.3506, 0.3845, 0.3401,
          0.9768, 0.3650, 0.2078, 0.8797},
         {0.0297, 0.1317, 0.5078, 0.3067, 0.6660, 0.1462, 0.4682, 0.7336,
          0.7179, 0.2204, 0.1069, 0.6926},
         {0.7480, 0.8893, 0.6652, 0.1768, 0.8269, 0.3775, 0.4806, 0.5755,
          0.7975, 0.4784, 0.8920, 0.6622},
         {0.7991, 0.5662, 0.0693, 0.5028, 0.8407, 0.7227, 0.1646, 0.4873,
          0.2997, 0.3926, 0.1160, 0.0254},
         {0.9565, 0.1097, 0.4139, 0.0710, 0.3974, 0.7660, 0.2060, 0.3437,
          0.4523, 0.5252, 0.1339, 0.1686},
         {0.0936, 0.3295, 0.5959, 0.1962, 0.3320, 0.0574, 0.0543, 0.3323,
          0.0413, 0.4091, 0.5908, 0.9443}},

        {{0.3542, 0.9161, 0.9507, 0.0060, 0.2547, 0.1334, 0.4992, 0.7464,
          0.0895, 0.9555, 0.3341, 0.4757},
         {0.2748, 0.8872, 0.7961, 0.6525, 0.0106, 0.6855, 0.8211, 0.7612,
          0.5216, 0.0206, 0.2166, 0.5757},
         {0.1651, 0.1822, 0.7204, 0.5505, 0.2630, 0.5045, 0.6888, 0.4271,
          0.2509, 0.0157, 0.7781, 0.4301},
         {0.3048, 0.4920, 0.7192, 0.9428, 0.7646, 0.0516, 0.7559, 0.0269,
          0.8779, 0.1900, 0.8941, 0.0906},
         {0.6344, 0.8291, 0.7091, 0.4515, 0.8445, 0.8624, 0.3270, 0.8477,
          0.0189, 0.7442, 0.6570, 0.8380},
         {0.3590, 0.8097, 0.8471, 0.8545, 0.5251, 0.3404, 0.2133, 0.6352,
          0.7388, 0.8211, 0.7904, 0.1170},
         {0.7599, 0.5029, 0.7805, 0.6894, 0.5376, 0.2840, 0.2004, 0.5379,
          0.2195, 0.2702, 0.1907, 0.7128},
         {0.6188, 0.6399, 0.7768, 0.8410, 0.4695, 0.2550, 0.0256, 0.3247,
          0.3835, 0.4979, 0.2184, 0.6222},
         {0.5879, 0.6047, 0.6246, 0.8559, 0.8785, 0.4786, 0.8133, 0.6124,
          0.5130, 0.3709, 0.1528, 0.8356},
         {0.3956, 0.3767, 0.2431, 0.9542, 0.8536, 0.9353, 0.1847, 0.2182,
          0.9542, 0.2315, 0.5618, 0.0642},
         {0.7349, 0.4614, 0.2141, 0.4754, 0.9519, 0.3812, 0.0566, 0.8342,
          0.3300, 0.7834, 0.1147, 0.4208},
         {0.2486, 0.7540, 0.8209, 0.2556, 0.8585, 0.7775, 0.0453, 0.7733,
          0.6558, 0.2526, 0.6573, 0.0044}},

        {{0.1957, 0.2081, 0.7856, 0.7202, 0.5458, 0.4396, 0.1255, 0.9884,
          0.6974, 0.3565, 0.5973, 0.5861},
         {0.4874, 0.4812, 0.7147, 0.2748, 0.6530, 0.2346, 0.8132, 0.0398,
          0.5472, 0.8874, 0.3719, 0.6019},
         {0.9218, 0.0476, 0.9431, 0.5943, 0.5366, 0.8545, 0.3187, 0.8278,
          0.8870, 0.0701, 0.0036, 0.7770},
         {0.8221, 0.4231, 0.8434, 0.5069, 0.2583, 0.9892, 0.1808, 0.4823,
          0.3838, 0.3786, 0.3749, 0.6353},
         {0.2305, 0.3947, 0.2672, 0.9953, 0.3135, 0.2724, 0.1327, 0.8854,
          0.6866, 0.3027, 0.8056, 0.9657},
         {0.8666, 0.6045, 0.8648, 0.0737, 0.7910, 0.2803, 0.5281, 0.0561,
          0.4102, 0.7253, 0.0781, 0.4097},
         {0.2384, 0.3410, 0.9035, 0.6587, 0.9154, 0.8495, 0.4013, 0.5400,
          0.0252, 0.4120, 0.7329, 0.7664},
         {0.0502, 0.5762, 0.7563, 0.6610, 0.4109, 0.4605, 0.5700, 0.5596,
          0.9327, 0.8562, 0.3848, 0.8454},
         {0.2723, 0.0058, 0.5695, 0.4863, 0.1010, 0.1493, 0.1594, 0.7150,
          0.9498, 0.9003, 0.5322, 0.2205},
         {0.0767, 0.7675, 0.0788, 0.1883, 0.6661, 0.8723, 0.6408, 0.9949,
          0.5959, 0.1056, 0.1038, 0.3079},
         {0.7268, 0.6984, 0.3532, 0.7370, 0.8463, 0.8860, 0.5669, 0.4080,
          0.8693, 0.8017, 0.7571, 0.8834},
         {0.8799, 0.5817, 0.5698, 0.6256, 0.0470, 0.2415, 0.6565, 0.0526,
          0.0786, 0.1079, 0.1026, 0.4615}}};

std::vector<std::vector<std::vector<float>>> exp_out=\
        {{{1.0799, 0.6126, 0.9173, 0.2020, 0.8758, 0.4495, 1.6876, 1.0757,
          1.1898, 0.5348, 0.8926, 0.8136},
         {0.5079, 1.1723, 0.9686, 0.8965, 0.5213, 1.2856, 0.8619, 1.1980,
          0.8342, 1.4602, 0.8731, 0.7134},
         {1.3856, 0.9604, 0.6287, 1.2407, 0.5329, 0.9921, 0.4573, 1.2438,
          1.3194, 1.2430, 0.8784, 0.9841},
         {1.1444, 1.6332, 1.3801, 1.1244, 0.6437, 1.2349, 0.2715, 0.3000,
          1.6631, 0.8802, 1.4250, 0.3726},
         {1.5469, 1.7907, 1.3438, 1.6613, 0.8236, 1.4846, 1.1587, 0.9448,
          0.2156, 1.5007, 0.8278, 0.2362},
         {1.1242, 0.9897, 1.1301, 1.4078, 0.7638, 0.6939, 0.1706, 0.4206,
          0.8294, 0.2969, 0.9795, 0.5762},
         {0.9997, 0.6935, 0.9400, 0.9642, 0.3008, 1.2666, 1.3215, 0.7173,
          1.0695, 0.6327, 0.9905, 1.1543},
         {0.1109, 0.2705, 1.0695, 0.9675, 1.1621, 1.0192, 0.6229, 1.2099,
          0.7599, 1.0272, 0.2463, 0.9936},
         {0.7801, 1.2042, 1.2372, 0.8603, 1.0114, 0.3806, 0.6901, 0.8742,
          1.7340, 0.7628, 1.6377, 1.4913},
         {1.1590, 1.2263, 0.8861, 0.9365, 1.7153, 1.2696, 0.5219, 0.9652,
          0.5483, 1.2430, 0.7776, 0.9574},
         {1.3095, 0.6731, 0.9220, 0.7886, 0.5036, 1.1468, 1.2041, 0.7790,
          0.7792, 1.1875, 0.5324, 0.9584},
         {1.0452, 0.3584, 0.7951, 0.3364, 0.5764, 0.1785, 0.1755, 0.3511,
          0.3244, 1.0481, 1.5097, 1.0960}},

        {{1.2960, 1.7727, 1.0605, 0.0514, 0.3794, 1.0899, 1.3535, 1.2171,
          0.4300, 1.6917, 1.2808, 1.1983},
         {0.9024, 1.1228, 0.8079, 1.5436, 0.4299, 1.3564, 1.7262, 0.9467,
          1.3555, 0.3319, 0.7147, 1.5099},
         {0.3137, 0.5729, 0.7908, 0.7731, 0.7793, 1.4371, 0.8104, 1.3503,
          1.1341, 0.3407, 0.9234, 0.9513},
         {1.0196, 1.0236, 1.0598, 0.9598, 1.0837, 0.3365, 0.9974, 0.5588,
          1.6397, 1.1895, 1.8534, 0.7875},
         {1.5752, 1.6339, 0.8963, 0.7673, 1.8057, 1.5377, 1.2624, 1.3856,
          0.3781, 1.1844, 0.8618, 0.9203},
         {1.1313, 1.4915, 1.5589, 1.5159, 1.2521, 0.8973, 0.8351, 0.9760,
          0.9481, 1.5590, 1.1625, 0.5638},
         {1.0717, 0.6006, 0.8942, 0.8695, 0.7580, 0.4254, 1.0686, 0.6433,
          1.0210, 0.5410, 0.8060, 1.3150},
         {1.4893, 1.2334, 1.7687, 0.8996, 1.4219, 1.2305, 0.2120, 0.8712,
          0.8647, 1.1400, 0.9153, 1.4248},
         {0.9447, 0.9345, 1.1216, 1.8426, 1.4152, 1.1548, 1.2411, 1.5935,
          0.6528, 1.2406, 0.7174, 1.1829},
         {1.2487, 1.3192, 0.8926, 1.4525, 1.6641, 1.3988, 1.0699, 0.2346,
          1.2939, 1.1073, 1.0222, 0.7869},
         {1.0119, 0.9954, 1.1294, 0.7171, 1.9343, 0.4237, 0.9460, 0.9571,
          1.2744, 1.0757, 0.3631, 1.2493},
         {0.3636, 1.2723, 1.3572, 0.7649, 0.8679, 1.0571, 0.6332, 1.1987,
          1.1833, 0.7539, 1.0404, 0.3006}},

        {{0.5053, 0.4574, 1.6085, 0.9956, 1.0491, 0.7984, 0.5772, 1.9749,
          1.3805, 0.5493, 0.9699, 1.5371},
         {1.0467, 1.4294, 1.4730, 0.7969, 0.7083, 0.9233, 0.9211, 0.8561,
          0.8136, 1.7551, 0.7354, 1.5639},
         {1.3284, 0.2497, 1.4115, 0.9615, 0.7770, 1.7675, 0.5998, 1.5819,
          1.4695, 0.6093, 0.1144, 1.2160},
         {1.1037, 1.2032, 1.2263, 0.5852, 0.6327, 1.2321, 0.9842, 1.1583,
          0.9158, 0.8636, 0.8054, 0.9467},
         {0.2740, 0.9812, 1.0714, 1.4486, 0.4643, 0.7088, 0.4707, 0.9963,
          1.4242, 0.3376, 1.2194, 1.1837},
         {1.0698, 0.8061, 1.5247, 0.8784, 1.2768, 0.6737, 1.4418, 0.3254,
          1.0381, 1.1412, 0.9422, 0.5623},
         {0.7813, 1.1461, 1.4924, 0.9360, 1.8748, 0.8623, 0.4466, 1.3924,
          0.8510, 1.1631, 0.8644, 1.1865},
         {0.3258, 1.4517, 1.5415, 1.4883, 1.2133, 1.4074, 0.6186, 1.5546,
          1.9070, 1.8389, 0.8791, 0.9371},
         {1.2579, 0.0930, 1.4834, 0.6833, 0.3678, 0.9501, 1.0352, 0.8513,
          1.1586, 1.4144, 1.1066, 0.2362},
         {0.2266, 1.1856, 0.7402, 0.3857, 1.3630, 1.2100, 1.5376, 1.6801,
          0.8140, 0.9555, 0.9463, 0.8732},
         {1.3653, 1.6655, 1.0143, 1.3306, 0.8895, 1.6319, 0.5684, 1.1760,
          1.3626, 1.6689, 1.0591, 1.0279},
         {0.9038, 0.6652, 1.1841, 0.6478, 0.7499, 0.6228, 1.0012, 0.4704,
          0.2109, 0.4859, 0.8870, 0.5039}}};
    
TEST(EXPRESSION,forward1)
{
    easynn::Mat left_mat(12,12,3);
    easynn::Mat right_mat(12,12,3);
    easynn::Mat out_mat(12,12,3);
    left_mat.fillFromArray(exp_add_left);
    right_mat.fillFromArray(exp_add_right);
    out_mat.fillFromArray(exp_out);

    easynn::Expression exp;
    easynn::Optional option;

    std::vector<easynn::Mat> inputs;
    inputs.push_back(left_mat);
    inputs.push_back(right_mat);

    std::vector<easynn::Mat> outputs;
    easynn::Mat m1;
    outputs.push_back(m1);

    exp.forward(inputs,outputs,option);

    EXPECT_EQ(compareMat(out_mat,outputs[0]),0);
}


TEST(EXPRESSION,forward2)
{
    std::vector<float> v1={1.2,1.3,1.88};
    std::vector<float> v2={1.2,1.3,1.88};
    std::vector<float> v3={2.4,2.6,3.76};

    easynn::Mat left_mat(3);
    easynn::Mat right_mat(3);
    easynn::Mat out_mat(3);

    left_mat.fillFromArray(v1);
    right_mat.fillFromArray(v2);
    out_mat.fillFromArray(v3);

    easynn::Expression exp;
    easynn::Optional option;

    std::vector<easynn::Mat> inputs;
    inputs.push_back(left_mat);
    inputs.push_back(right_mat);

    std::vector<easynn::Mat> outputs;
    easynn::Mat m1;
    outputs.push_back(m1);

    exp.forward(inputs,outputs,option);

    EXPECT_EQ(compareMat(out_mat,outputs[0]),0);
}


TEST(EXPRESSION,forward3)
{
    std::vector<std::vector<float>> v1={{1.2,1.3,1.88},{122,1.33,99.2}};
    std::vector<std::vector<float>> v2={{1.2,1.3,1.88},{123,22.3,11.1}};
    std::vector<std::vector<float>> v3={{2.4,2.6,3.76},{245,23.63,110.3}};

    easynn::Mat left_mat(3,2);
    easynn::Mat right_mat(3,2);
    easynn::Mat out_mat(3,2);

    left_mat.fillFromArray(v1);
    right_mat.fillFromArray(v2);
    out_mat.fillFromArray(v3);

    easynn::Expression exp;
    easynn::Optional option;

    std::vector<easynn::Mat> inputs;
    inputs.push_back(left_mat);
    inputs.push_back(right_mat);

    std::vector<easynn::Mat> outputs;
    easynn::Mat m1;
    outputs.push_back(m1);

    exp.forward(inputs,outputs,option); 
    EXPECT_EQ(compareMat(out_mat,outputs[0]),0);
}